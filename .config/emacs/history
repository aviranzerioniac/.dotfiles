;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(read-expression-history swiper-history command-history flycheck-read-checker-history read-number-history ivy-history empty-history buffer-name-history minibuffer-history counsel-M-x-history file-name-history))
(setq read-expression-history '("(+ (0 0))"))
(setq command-history '((search-forward "global-flycheck-mode") (company-posframe-mode 'toggle) (search-forward "company") (all-the-icons-ivy-rich-kill-buffer "autostart.sh") (all-the-icons-ivy-rich-kill-buffer "config.py") (all-the-icons-insert-faicon nil) (all-the-icons-insert nil) (all-the-icons-ivy-rich-mode 'toggle) (all-the-icons-insert-material nil) (bug-hunter-init-file nil) (package-install 'gcmh nil) (search-forward "org-support-shift") (search-forward "org-support-shift	") (ibuffer-find-file "/home/bagofnothing/.config/emacs/init.el" t) (latex-math-mode 'toggle) (org-latex-export-as-latex) (org-latex-convert-region-to-latex) (org-latex-preview nil) (org-latex-export-to-pdf) (org-edit-latex-mode 'toggle) (package-install 'org-edit-latex nil) (org-mode) (latex-mode) (org-occur "eindeutig" nil) (search-forward "org-cont") (search-forward "org") (search-forward "org-support") (bug-hunter-init-file '(+ (0 0))) (bug-reference-mode 'toggle) (company-mode 'toggle) (company-anaconda 'interactive) (search-forward "company-backend") (search-forward "backend") (package-install 'company-shell nil) (package-menu-filter-upgradable) (all-the-icons-ivy-rich-kill-buffer "*Compile-Log*") (all-the-icons-ivy-rich-kill-buffer " *Minibuf-1*") (all-the-icons-ivy-rich-kill-buffer "*scratch*") (all-the-icons-ivy-rich-kill-buffer "*Warnings*") (switch-to-buffer-other-tab "*Compile-Log*") (switch-to-buffer-other-tab "*Messages*") (package-install 'flyspell-correct-popup nil) (package-install 'treemacs-all-the-icons nil) (package-install 'all-the-icons-ivy-rich nil) (company-ispell 'interactive) (package-install 'flycheck-grammarly nil) (flycheck-pycheckers-setup) (package-install 'flycheck-pycheckers nil) (company-indent-or-complete-common nil) (flycheck-posframe-mode 'toggle) (flycheck-mode 'toggle) (switch-to-buffer-other-tab "*Warnings*") (switch-to-buffer-other-tab "*nov unzip*") (switch-to-buffer-other-tab "Monster_Paradise_1486-1487.epub") (kill-some-buffers) (switch-to-buffer-other-tab "vlNotes.org") (switch-to-buffer-other-tab "*Async-native-compile-log*") (switch-to-buffer-other-tab "*Python check: python numbers.py*") (python-check "python numbers.py") (switch-to-buffer-other-tab "RunCukesTest.java") (python-check "mypls numbers.py") (python-check "install pyflakes, pylint or something else numbers.py") (flyspell-mode 'toggle)))
(setq ivy-history '(#("autostart.sh" 0 12 (ivy-index 1)) #("config.py" 0 9 (ivy-index 0)) #("hourglass-end" 0 1 (display #("	h" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 303 ivy-index 7) 1 13 (idx 303 ivy-index 7)) #("music" 0 1 (display #("	m" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 386 ivy-index 0) 1 5 (idx 386 ivy-index 0)) #("recycle" 0 1 (display #("	r" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 445 ivy-index 0) 1 7 (idx 445 ivy-index 0)) #("american-sign-language-interpreting" 0 1 (display #("	a" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 9 ivy-index 0) 1 35 (idx 9 ivy-index 0)) #("gitlab" 0 1 (display #("	g" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 267 ivy-index 267) 1 6 (idx 267 ivy-index 267)) #("desktop" 0 1 (display #("	d" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 176 ivy-index 8) 1 7 (idx 176 ivy-index 8)) #("emacs	[fileicon]" 0 1 (display #("	e" 0 1 (face (:family "file-icons" :height 1.2) font-lock-face (:family "file-icons" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 2443 ivy-index 0) 1 16 (idx 2443 ivy-index 0)) #("chrome" 0 1 (display #("	c" 0 1 (face (:family "FontAwesome" :height 1.2) font-lock-face (:family "FontAwesome" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 133 ivy-index 133) 1 6 (idx 133 ivy-index 133)) #("apps	[material]" 0 1 (display #("	a" 0 1 (face (:family "Material Icons" :height 1.2) font-lock-face (:family "Material Icons" :height 1.2) display (raise -0.24) rear-nonsticky t)) idx 45 ivy-index 45) 1 15 (idx 45 ivy-index 45)) #("gcmh" 0 4 (ivy-index 0)) #("org-edit-latex" 0 14 (ivy-index 1)) #("vlNotes.org" 0 11 (ivy-index 0)) #("*Flycheck error messages*" 0 25 (ivy-index 5)) #("*Messages*" 0 10 (ivy-index 3)) #("vlno" 0 4 (ivy-index 2)) "AFE/vlNotes.org" #("company-shell" 0 13 (ivy-index 12)) #("*Compile-Log*" 0 13 (ivy-index 4)) #(" *Minibuf-1*" 0 12 (ivy-index 1)) #("*scratch*" 0 9 (ivy-index 0)) #("init.el" 0 7 (ivy-index 1)) #("*Warnings*" 0 10 (ivy-index 0)) #("flyspell-correct-popup" 0 22 (ivy-index 3)) #("treemacs-all-the-icons" 0 22 (ivy-index 0)) #("all-the-icons-ivy-rich" 0 22 (ivy-index 2)) #("vl" 0 2 (ivy-index 2)) #("flycheck-grammarly" 0 18 (ivy-index 0)) #("flycheck-pycheckers" 0 19 (ivy-index 2)) #("mspyls" 0 6 (idx 0 ivy-index 0)) #("jdtls" 0 5 (idx 0 ivy-index 0)) #("company-posframe" 0 16 (ivy-index 6)) #("flycheck-posframe" 0 17 (ivy-index 3)) #("auto-dictionary" 0 15 (ivy-index 12))))
(setq buffer-name-history '(#("*Compile-Log*" 0 13 (ivy-index 5)) #("*Messages*" 0 10 (ivy-index 3)) #("*Warnings*" 0 10 (ivy-index 4)) #("*nov unzip*" 0 11 (ivy-index 4)) #("Monster_Paradise_1486-1487.epub" 0 31 (ivy-index 0)) #("vlNotes.org" 0 11 (ivy-index 0)) #("*Async-native-compile-log*" 0 26 (ivy-index 3)) #("*Python check: python numbers.py*" 0 33 (ivy-index 12)) #("RunCukesTest.java" 0 17 (ivy-index 3)) #("*Flycheck error messages*" 0 25 (ivy-index 5)) #("init.el" 0 7 (ivy-index 1)) #("WeekofWisedom.org~" 0 18 (ivy-index 4)) #("*undo-tree Diff*" 0 16 (ivy-index 0))))
(setq minibuffer-history '("global-flycheck-mode" "company" "org-support-shift" "org-support-shift	" "eindeutig" "org-cont" "org" "org-support" "company-backend" "backend" "python numbers.py" "mypls numbers.py" "install pyflakes, pylint or something else numbers.py" "flyspell" "fd-switch"))
(setq counsel-M-x-history '(#("^search" 0 7 (ivy-index 5)) "search-forward" #("^company-po" 0 11 (ivy-index 4)) "company-posframe-mode" #("^all" 0 4 (ivy-index 11)) "all-the-icons-insert-faicon" #("^all-the" 0 8 (ivy-index 9)) "all-the-icons-insert" #("^all-the-ico" 0 12 (ivy-index 9)) "all-the-icons-ivy-rich-mode" "all-the-icons-insert-material" #("^bug-hu" 0 7 (ivy-index 1)) "bug-hunter-init-file" #("^pack" 0 5 (ivy-index 4)) "package-install" #("^bug" 0 4 (ivy-index 3)) #("^sear" 0 5 (ivy-index 5)) #("^sea" 0 4 (ivy-index 5)) #("^bug-" 0 5 (ivy-index 3)) #("^latex-math-mode" 0 16 (ivy-index 2)) "latex-math-mode" #("^org-la" 0 7 (ivy-index 2)) "org-latex-export-as-latex" "org-latex-convert-region-to-latex" #("^org-lat" 0 8 (ivy-index 3)) "org-latex-preview" "org-latex-export-to-pdf" #("^org-late" 0 9 (ivy-index 2)) #("^org-edit-la" 0 12 (ivy-index 4)) "org-edit-latex-mode" #("^org-mode" 0 9 (ivy-index 1)) "org-mode" #("^latex" 0 6 (ivy-index 0)) "latex-mode" #("^package" 0 8 (ivy-index 4)) #("^org-latex" 0 10 (ivy-index 3)) #("^searc" 0 6 (ivy-index 5)) #("^bug-hun" 0 8 (ivy-index 1)) "bug-reference-mode" #("^company-mode" 0 13 (ivy-index 0)) "company-mode" #("^company-a" 0 10 (ivy-index 5)) "company-anaconda" #("^package-ins" 0 12 (ivy-index 0)) "package-menu-filter-upgradable" #("^package-in" 0 11 (ivy-index 1)) "package-install-file" #("^company-" 0 9 (ivy-index 42)) "company-ispell" #("^flycheck-py" 0 12 (ivy-index 0)) "flycheck-pycheckers-setup" #("^com" 0 4 (ivy-index 0)) "company-indent-or-complete-common" #("^company-mod" 0 12 (ivy-index 0)) #("^flycheck-po" 0 12 (ivy-index 0)) "flycheck-posframe-mode" #("^flyche" 0 7 (ivy-index 4)) "flycheck-mode" #("^flyc" 0 5 (ivy-index 4)) #("^kill-som" 0 9 (ivy-index 0)) "kill-some-buffers" #("^latex-math-mo" 0 14 (ivy-index 2)) #("^late" 0 5 (ivy-index 0)) #("^flyspe" 0 7 (ivy-index 5)) "flyspell-mode" #("^flych" 0 6 (ivy-index 4)) #("^package-de" 0 11 (ivy-index 0)) "package-delete" #("^list-pa" 0 8 (ivy-index 0)) "list-packages" #("^org-inf" 0 8 (ivy-index 0)) "org-info" #("^paradox-" 0 9 (ivy-index 5)) "paradox-upgrade-packages" #("^org-cd" 0 7 (ivy-index 0)) "org-cdlatex-mode" #("^treemacs" 0 9 (ivy-index 89)) "treemacs" #("^ivy-r" 0 6 (ivy-index 0)) "ivy-rich-mode" #("^ivy-ri" 0 7 (ivy-index 0))))
(setq file-name-history '(#("/home/bagofnothing/.config/qtile/config.py" 0 42 (ivy-index 5)) #("/home/bagofnothing/.config/qtile/autostart.sh" 0 45 (ivy-index 0)) #("/home/bagofnothing/.config/emacs/init.el" 0 40 (ivy-index 0)) #("/home/bagofnothing/Development/Uni/AFE/vl-pdf" 0 45 (ivy-index 0)) #("/home/bagofnothing/Development/emacs-native-comp-git/emacs-git/" 0 63 (ivy-index 3)) #("/home/bagofnothing/Development/build/" 0 37 (ivy-index 0)) #("/home/bagofnothing/Development/Uni/AFE/Monster_Paradise_1486-1487.epub" 0 70 (ivy-index 6)) #("/home/bagofnothing/Development/Uni/AFE/vlNotes.org" 0 50 (ivy-index 0)) #("/home/bagofnothing/Development/python/progs/numbers.py" 0 54 (ivy-index 9)) #("/home/bagofnothing/Development/python/progs/" 0 44 (ivy-index 1)) #("/home/bagofnothing/Development/github/" 0 38 (ivy-index 0)) #("/home/bagofnothing/Development/orgs:md/unixLinuxHandbook.md" 0 59 (ivy-index 12)) #("/home/bagofnothing/Development/orgs:md/WeekofWisedom.org~" 0 57 (ivy-index 8)) #("/home/bagofnothing/Development/orgs:md/#WeekofWisedom.org#" 0 58 (ivy-index 2)) #("/home/bagofnothing/.bashrc" 0 26 (ivy-index 0)) #("/home/bagofnothing/.bash_history" 0 32 (ivy-index 0)) #("/home/bagofnothing/Development/" 0 31 (ivy-index 0)) "~/.config/emacs/init.el"))
(setq tablist-named-filter 'nil)
(setq kill-ring '(#(";; gcmh

(use-package gcmh)
(gcmh-mode 1)
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 8 (fontified t face font-lock-comment-face) 8 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-1-face)) 10 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-constant-face) 26 27 (fontified t face (rainbow-delimiters-depth-1-face)) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-1-face)) 29 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-1-face)) 41 42 (fontified t)) #("
(use-package gcmh)
(gcmh-mode 1)
" 0 1 (fontified t) 1 2 (face (rainbow-delimiters-depth-1-face) fontified t) 2 13 (face font-lock-keyword-face fontified t) 13 14 (fontified t) 14 18 (face font-lock-constant-face fontified t) 18 19 (face (rainbow-delimiters-depth-1-face) fontified t) 19 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-1-face) fontified t) 21 32 (fontified t) 32 33 (face (rainbow-delimiters-depth-1-face) fontified t rear-nonsticky t) 33 34 (fontified t)) "(add-to-list 'load-path \"path-to-gcmh-here\")
(gcmh-mode 1)" #("(setq user-emacs-directory \"~/.config/emacs/\")
" 0 1 (face (rainbow-delimiters-depth-1-face) fontified t) 1 5 (face font-lock-keyword-face fontified t) 5 27 (fontified t) 27 41 (face font-lock-string-face fontified t) 41 45 (face font-lock-string-face fontified t) 45 46 (face (rainbow-delimiters-depth-1-face) fontified t) 46 47 (fontified t)) "(defun doom-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun doom-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold doom-gc-cons-threshold))))

(add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)" "(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)))" "(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)" #("
;; ;; ;;
;; emacs config made from scratch
;; sphaghetti emacs config
;; Configuring emacs from scratch is like using super glue to attach parts
;; that don't actually want to work together peacefully. But there is fun to
;; be had in that.
;; And if it works in the end, somehow, who am I to cry?
;; @ Lokesh Dhakal 2020
;; ;; ;;
" 0 1 (fontified t) 1 4 (face font-lock-comment-delimiter-face fontified t) 4 10 (face font-lock-comment-face fontified t) 10 13 (face font-lock-comment-delimiter-face fontified t) 13 44 (face font-lock-comment-face fontified t) 44 47 (face font-lock-comment-delimiter-face fontified t) 47 71 (face font-lock-comment-face fontified t) 71 74 (face font-lock-comment-delimiter-face fontified t) 74 146 (face font-lock-comment-face fontified t) 146 149 (face font-lock-comment-delimiter-face fontified t) 149 223 (face font-lock-comment-face fontified t) 223 226 (face font-lock-comment-delimiter-face fontified t) 226 242 (face font-lock-comment-face fontified t) 242 245 (face font-lock-comment-delimiter-face fontified t) 245 299 (face font-lock-comment-face fontified t) 299 302 (face font-lock-comment-delimiter-face fontified t) 302 323 (face font-lock-comment-face fontified t) 323 326 (face font-lock-comment-delimiter-face fontified t) 326 332 (face font-lock-comment-face fontified t)) #("(org-support-shift-select t)" 0 1 (face (rainbow-delimiters-depth-2-face) fontified t) 1 18 (fontified t) 18 27 (fontified t) 27 28 (face (rainbow-delimiters-depth-2-face) fontified t)) #("a \\congruence \\modulo{n} b
" 0 2 (fontified t) 2 13 (fontified t face (font-latex-sedate-face)) 13 14 (fontified t) 14 21 (fontified t face (font-latex-sedate-face)) 21 27 (fontified t)) "org" "(use-package company-anaconda
  :after (anaconda-mode company)
  :config (add-to-list 'company-backends 'company-anaconda))" "la" #("tb" 0 2 (fontified t))))
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
